{"version":3,"sources":["components/TodoListItem.js","components/TodoList.js","components/TodoInsert.js","components/TodoTemplate.js","App.js","serviceWorker.js","index.js"],"names":["memo","todo","style","onRemove","onToggle","id","text","checked","className","cn","onClick","todos","rowRenderer","useCallback","index","key","rowCount","length","list","outline","width","height","rowHeight","TodoInsert","onInsert","useState","value","setValue","onChange","e","target","onSubmit","preventDefault","placeholder","type","TodoTemplate","children","createBulkTodos","array","i","push","todoReducer","action","concat","filter","map","App","useReducer","undefined","dispatch","nextId","useRef","DUMMY_SIZE","current","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5d950434.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport {\n  MdCheckBox,\n  MdRemoveCircleOutline,\n  MdCheckBoxOutlineBlank,\n} from 'react-icons/md';\nimport cn from 'classnames';\nimport './TodoListItem.scss';\n\nconst TodoListItem = ({\n  todo,\n  style = {},\n  onRemove = () => {},\n  onToggle = () => {},\n}) => {\n  const { id, text, checked } = todo;\n\n  return (\n    <div className=\"TodoListItem-virtualized\" style={style}>\n      <div className=\"TodoListItem\">\n        <div\n          className={cn('checkbox', { checked })}\n          onClick={() => onToggle(id)}\n        >\n          {checked ? <MdCheckBox /> : <MdCheckBoxOutlineBlank />}\n          <div className=\"text\">{text}</div>\n        </div>\n        <div className=\"remove\" onClick={() => onRemove(id)}>\n          <MdRemoveCircleOutline />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default memo(TodoListItem);\n","import React, { memo, useCallback } from 'react';\nimport { List } from 'react-virtualized';\nimport TodoListItem from './TodoListItem';\nimport './TodoListItem.scss';\n\nconst WIDTH = 512;\nconst HEIGHT = 513;\nconst ROW_HEIGHT = 57;\n\nconst TodoList = ({ todos = [], onRemove = () => {}, onToggle = () => {} }) => {\n  const rowRenderer = useCallback(\n    ({ index, key, style }) => {\n      const todo = todos[index];\n      return (\n        <TodoListItem\n          key={key}\n          todo={todo}\n          style={style}\n          onRemove={onRemove}\n          onToggle={onToggle}\n        />\n      );\n    },\n    [onRemove, onToggle, todos],\n  );\n\n  const rowCount = todos.length;\n  const style = { outline: 'none' };\n\n  return (\n    <List\n      list={todos}\n      style={style}\n      width={WIDTH}\n      height={HEIGHT}\n      rowCount={rowCount}\n      className=\"TodoList\"\n      rowHeight={ROW_HEIGHT}\n      rowRenderer={rowRenderer}\n    />\n  );\n};\n\nexport default memo(TodoList);\n","import React, { useState, useCallback } from 'react';\nimport { MdAdd } from 'react-icons/md';\nimport './TodoInsert.scss';\n\nconst TodoInsert = ({ onInsert = () => {} }) => {\n  const [value, setValue] = useState('');\n\n  const onChange = useCallback((e) => {\n    setValue(e.target.value);\n  }, []);\n  const onSubmit = useCallback(\n    (e) => {\n      onInsert(value);\n      setValue('');\n      e.preventDefault();\n    },\n    [onInsert, value],\n  );\n\n  return (\n    <form className=\"TodoInsert\" onSubmit={onSubmit}>\n      <input\n        value={value}\n        placeholder=\"할 일을 입력하세요.\"\n        onChange={onChange}\n      />\n      <button type=\"submit\">\n        <MdAdd />\n      </button>\n    </form>\n  );\n};\n\nexport default TodoInsert;\n","import React from 'react';\nimport './TodoTemplate.scss';\n\nconst TodoTemplate = ({ children }) => {\n  return (\n    <div className=\"TodoTemplate\">\n      <div className=\"app-title\">일정 관리</div>\n      <div className=\"content\">{children}</div>\n    </div>\n  );\n};\n\nexport default TodoTemplate;\n","import React, { useReducer, useRef, useCallback } from 'react';\nimport { TodoList, TodoInsert, TodoTemplate } from './components';\n\nconst DUMMY_SIZE = 2500;\n\nfunction createBulkTodos() {\n  const array = [];\n\n  for (let i = 0; i < DUMMY_SIZE; i++) {\n    array.push({\n      id: i,\n      text: `할 일 ${i}`,\n      checked: false,\n    });\n  }\n\n  return array;\n}\n\nfunction todoReducer(todos, action) {\n  switch (action.type) {\n    case 'INSERT':\n      return todos.concat(action.todo);\n    case 'REMOVE':\n      return todos.filter((todo) => todo.id !== action.id);\n    case 'TOGGLE':\n      return todos.map((todo) =>\n        todo.id === action.id\n          ? {\n              ...todo,\n              checked: !todo.checked,\n            }\n          : todo,\n      );\n    default:\n      return todos;\n  }\n}\n\nconst App = () => {\n  const [todos, dispatch] = useReducer(todoReducer, undefined, createBulkTodos);\n  const nextId = useRef(DUMMY_SIZE + 1);\n\n  const onInsert = useCallback((text) => {\n    const todo = {\n      id: nextId.current,\n      text,\n      checked: false,\n    };\n\n    dispatch({ type: 'INSERT', todo });\n\n    nextId.current += 1;\n  }, []);\n  const onRemove = useCallback((id) => {\n    dispatch({ type: 'REMOVE', id });\n  }, []);\n  const onToggle = useCallback((id) => {\n    dispatch({ type: 'TOGGLE', id });\n  }, []);\n\n  return (\n    <TodoTemplate>\n      <TodoInsert onInsert={onInsert} />\n      <TodoList todos={todos} onRemove={onRemove} onToggle={onToggle} />\n    </TodoTemplate>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}